// Generated by CoffeeScript 1.6.2
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Hand = (function(_super) {
    __extends(Hand, _super);

    function Hand() {
      _ref = Hand.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Hand.prototype.model = Card;

    Hand.prototype.initialize = function(array, deck, isDealer) {
      this.deck = deck;
      this.isDealer = isDealer != null ? isDealer : false;
      if (this.isDealer) {
        return this.handName = "Dealer";
      } else {
        return this.handName = "Player";
      }
    };

    Hand.prototype.getName = function() {
      return this.handName;
    };

    Hand.prototype.hit = function() {
      var newCard;

      newCard = this.deck.pop().flip();
      newCard.set('newCard', true);
      this.add(newCard).last();
      if (this.bestScore() === -1) {
        this.lose();
      }
      return newCard;
    };

    Hand.prototype.stand = function() {
      return this.trigger('stand', this);
    };

    Hand.prototype.lose = function() {
      return this.trigger('lose', this);
    };

    Hand.prototype.dealerPlay = function() {
      while (!this.overN(17)) {
        this.hit();
      }
      return this.stand();
    };

    Hand.prototype.overN = function(n) {
      var item, lowest, _i, _len, _ref1;

      lowest = this.scores('internal')[0];
      _ref1 = this.scores('internal');
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        item = _ref1[_i];
        if (item < lowest) {
          lowest = item;
        }
      }
      if (lowest > n) {
        return true;
      }
      return false;
    };

    Hand.prototype.bestScore = function() {
      var highest, item, _i, _len, _ref1;

      highest = -1;
      _ref1 = this.scores('internal');
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        item = _ref1[_i];
        if (item <= 21 && item > highest) {
          highest = item;
        }
      }
      return highest;
    };

    Hand.prototype.scores = function(internal) {
      var hasAce, score;

      hasAce = this.reduce(function(memo, card) {
        return memo || card.get('value') === 1;
      }, false);
      score = this.reduce(function(score, card) {
        if (internal) {
          return score + card.get('value');
        } else {
          return score + (card.get('revealed') ? card.get('value') : 0);
        }
      }, 0);
      if (hasAce) {
        return [score, score + 10];
      } else {
        return [score];
      }
    };

    Hand.prototype.reveal = function() {
      this.models[0].flip();
      return this.trigger('reveal', this);
    };

    return Hand;

  })(Backbone.Collection);

}).call(this);

/*
//@ sourceMappingURL=Hand.map
*/
