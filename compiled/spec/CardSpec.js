// Generated by CoffeeScript 1.6.2
(function() {
  describe("hand constructor", function() {
    var deck, hand;

    deck = null;
    hand = null;
    beforeEach(function() {
      deck = new Deck();
      return hand = deck.dealPlayer();
    });
    describe('hand', function() {
      it('should begin with two cards', function() {
        return expect(hand.length).toBe(2);
      });
      it('should be associated with deck', function() {
        return expect(hand.deck).toBe(deck);
      });
      it('should belong to dealer or player', function() {
        return expect(typeof hand.isDealer).toBe("boolean");
      });
      return it('should have another card after hit', function() {
        hand.hit();
        expect(hand.length).toBe(3);
        hand.hit();
        hand.hit();
        return expect(hand.length).toBe(5);
      });
    });
    describe('dealer hand', function() {
      beforeEach(function() {
        return hand = deck.dealDealer();
      });
      it('first card should not be initially revealed', function() {
        return expect(hand.models[0].get('revealed')).toBe(false);
      });
      return it('should flip the first card if revealed', function() {
        hand.reveal();
        return expect(hand.models[0].get('revealed')).toBe(true);
      });
    });
    describe('hit', function() {
      return it('should call lose if score goes over 21', function() {
        spyOn(Hand.prototype, 'lose').andCallThrough();
        spyOn(Hand.prototype, 'bestScore').andReturn(-1);
        deck = new Deck();
        hand = deck.dealPlayer();
        hand.hit();
        return expect(hand.lose).toHaveBeenCalled();
      });
    });
    describe('stand', function() {
      return it('should trigger stand', function() {
        spyOn(Hand.prototype, 'trigger').andCallThrough();
        deck = new Deck();
        hand = deck.dealPlayer();
        hand.stand();
        return expect(hand.trigger).toHaveBeenCalled();
      });
    });
    return describe('helpers', function() {
      it('should return true if score over some n', function() {
        var fakeCardData1, fakeCardData2, fakeCardData3, fakeCardData4;

        fakeCardData1 = {
          rank: 1
        };
        fakeCardData2 = {
          rank: 6
        };
        hand = new Hand([fakeCardData1, fakeCardData2]);
        expect(hand.overN(17)).toBe(false);
        console.log(hand.overN(17));
        fakeCardData3 = {
          rank: 10
        };
        hand = new Hand([fakeCardData1, fakeCardData2, fakeCardData3]);
        expect(hand.overN(17)).toBe(false);
        fakeCardData4 = {
          rank: 10
        };
        console.log(hand);
        hand = new Hand([fakeCardData1, fakeCardData2, fakeCardData3, fakeCardData4]);
        return expect(hand.overN(17)).toBe(true);
      });
      return it('should identify bestscore', function() {
        var fakeCardData1;

        fakeCardData1 = {
          rank: 1
        };
        hand = new Hand([fakeCardData1, fakeCardData1, fakeCardData1]);
        return expect(hand.bestScore()).toBe(13);
      });
    });
  });

}).call(this);

/*
//@ sourceMappingURL=CardSpec.map
*/
